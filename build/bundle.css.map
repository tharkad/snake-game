{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Food.svelte",
    "..\\..\\SnakeBody.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Snake from \"./Snake.svelte\";\n  import Food from \"./Food.svelte\";\n  let scale = 50;\n  let interval = 400;\n  let foodLeft = scale;\n  let foodTop = scale * 4;\n  let foodType = \"threeX\";\n  let boardWidth = 1200;\n  let boardHeight = 700;\n  let direction = \"right\";\n  let snakeBodies = [];\n  let sizes = [25, 50, 100];\n  let sizeSelected = scale;\n  let gameOver = false;\n\n  $: score = snakeBodies.length - 3;\n  $: speed = Math.floor(scale/interval * 100);\n\n  function gameLoop() {\n    if (!gameOver) {\n      let newSnakeBodies = [...snakeBodies];\n      newSnakeBodies.pop();\n\n      let {left, top} = newSnakeBodies[0];\n\n      if (direction === \"up\") {\n        top -= scale;\n      } else if (direction === \"down\") {\n        top += scale;\n      } else if (direction === \"left\") {\n        left -= scale;\n      } else if (direction === \"right\") {\n        left += scale;\n      }\n\n      const newHead = {left, top};\n      newSnakeBodies = [newHead, ...newSnakeBodies];\n\n      if (isGameOver(newSnakeBodies)) {\n        gameOver = true;\n      }\n      else {\n        snakeBodies = [...newSnakeBodies];\n\n        if (isCollide(newHead, {left: foodLeft, top: foodTop})) {\n          snakeAteFood();\n        }\n      }\n    }\n\n    setTimeout(gameLoop, interval);\n  };\n    \n  function isCollide(a, b) {\n    return !(\n      a.top < b.top ||\n      a.top > b.top ||\n      a.left < b.left ||\n      a.left > b.left\n    );\n  }\n\n  function snakeAteFood() {\n    if (foodType === \"normal\") {\n      snakeBodies = [...snakeBodies, snakeBodies[snakeBodies.length - 1]];\n    } else if (foodType === \"threeX\") {\n      snakeBodies = [...snakeBodies, snakeBodies[snakeBodies.length - 1]];\n      snakeBodies = [...snakeBodies, snakeBodies[snakeBodies.length - 1]];\n      snakeBodies = [...snakeBodies, snakeBodies[snakeBodies.length - 1]];\n    }\n    moveFood();\n    let newSpeed = scale / interval;\n    newSpeed = newSpeed * 1.05;\n    interval = Math.floor(scale / newSpeed);\n    speed = Math.floor(Math.floor((scale/interval) * 10000) / 100);\n  }\n\n  function moveFood() {\n    let goodFood = false;\n    while (!goodFood) {\n      foodTop = Math.floor((Math.random() * (Math.floor(boardHeight/scale) - 1))) * scale;\n      foodLeft = Math.floor((Math.random() * (Math.floor(boardWidth/scale) - 1))) * scale;\n      const foodInSnake = snakeBodies.filter(sb => isCollide(sb, {left: foodLeft, top: foodTop}));\n      goodFood = (foodInSnake.length == 0);\n    }\n    if (Math.random() > 0.8) {\n      foodType = \"threeX\";\n    } else {\n      foodType = \"normal\";\n    }\n  }\n\n  function isGameOver(newSnakeBodies) {\n    const snakeBodiesNoHead = newSnakeBodies.slice(1);\n    const snakeCollisions = snakeBodiesNoHead.filter(sb => isCollide(sb, newSnakeBodies[0]));\n    if (snakeCollisions.length > 0) {\n      return true;\n    }\n\n    const {top, left} = newSnakeBodies[0];\n    if (top >= boardHeight || top < 0 || left < 0 || left >= boardWidth) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function resetGame() {\n    gameOver = false;\n    moveFood();\n    direction = \"right\";\n    interval = Math.floor(scale * 8);\n    snakeBodies = [\n      {\n        left: scale * 2,\n        top: 0\n      },\n      {\n        left: scale,\n        top: 0\n      },\n      {\n        left: 0,\n        top: 0\n      }\n    ];\n  }\n\n  function getDirectionFromKeyCode(keyCode) {\n    if (keyCode === 38) {\n      return \"up\";\n    } else if (keyCode === 39) {\n      return \"right\";\n    } else if (keyCode === 37) {\n      return \"left\";\n    } else if (keyCode === 40) {\n      return \"down\";\n    }\n\n    return false;\n  };\n\n  function scaleChanged(e) {\n    scale = sizeSelected;\n    e.currentTarget.blur();\n    resetGame();\n  }\n\n  function onKeyDown(e) {\n    if (gameOver && e.keyCode === 13) {\n      resetGame();\n    }\n    const newDirection = getDirectionFromKeyCode(e.keyCode);\n    if (newDirection) {\n      direction = newDirection;\n    }\n  };\n\n  resetGame();\n  setTimeout(gameLoop, interval);\n</script>\n\n<style>\n  main {\n    border: solid black 1px;\n    position: relative;\n    margin: 20px auto;\n    background-image: url(\"../background.jpg\");\n    background-size: cover;\n  }\n  h2,\n  h1 {\n    text-align: center;\n  }\n  .sizeForm {\n    text-align: center;\n  }\n  table {\n    border:1px solid black;\n    margin-left:auto;\n    margin-right:auto;\n    font-size: 2em;\n  }\n  td {\n    padding: 10px;\n  }\n</style>\n\n<table>\n  <tr>\n    <th colspan=\"3\">\n      {#if gameOver}\n        Game Over - Press Enter\n      {:else}\n        Snake Game\n      {/if}\n  </tr>\n  <tr>\n    <td>Score {score}</td><td>Speed {speed}</td>\n    <td>\n      <form class=\"sizeForm\">\n        Size: <select bind:value={sizeSelected} on:change={scaleChanged}>\n          {#each sizes as size}\n            <option value={size}>\n              {size}\n            </option>\n          {/each}\n        </select>\n      </form>    \n    </td>\n  </tr>\n</table>\n\n<main style=\"width: {boardWidth}px; height: {boardHeight}px\">\n  <Snake {snakeBodies} {direction} {scale}/>\n  <Food {foodTop} {foodLeft} {scale} {foodType}/>\n</main>\n\n\n<svelte:window on:keydown={onKeyDown}/> ",
    "<script>\n  export let foodTop;\n  export let foodLeft;\n  export let scale;\n  export let foodType;\n</script>\n\n<style>\n  .normal {\n    position: absolute;\n    border: solid black 1px;\n    background-color: greenyellow;\n    border-radius: 50%;\n    z-index: 0;\n  }\n\n  .threeX {\n    position: absolute;\n    border: solid black 1px;\n    background-color: red;\n    border-radius: 20%;\n    z-index: 0;\n  }\n</style>\n\n{#if foodType === \"normal\"}\n  <div class={foodType} style=\"left: {foodLeft + 5}px; top: {foodTop + 5}px; width: {scale - 10}px; height: {scale - 10}px\" />\n{:else}\n  <div class={foodType} style=\"left: {foodLeft}px; top: {foodTop}px; width: {scale - 2}px; height: {scale - 2}px\" />\n{/if}",
    "<script>\n  export let top;\n  export let left;\n  export let isHead = false;\n  export let direction = \"right\";\n  export let scale;\n</script>\n\n<style>\n  .snake-body {\n    background-color: green;\n    border: black 1px solid;\n    position: absolute;\n    z-index: 3;\n  }\n  .eyes {\n    position: absolute;\n    background-color: orange;\n    border-radius: 50%;\n    width: 20%;\n    height: 20%;\n  }\n  #leftEye {\n    left: 70%;\n    top: 10%;\n  }\n  #rightEye {\n    left: 70%;\n    bottom: 10%;\n  }\n  .snake-body.right {\n    transform: rotate(0deg);\n  }\n  .snake-body.left {\n    transform: rotate(180deg);\n  }\n  .snake-body.up {\n    transform: rotate(270deg);\n  }\n  .snake-body.down {\n    transform: rotate(90deg);\n  }\n</style>\n\n<div style=\"width: {scale - 2}px; height: {scale - 2}px; left: {left}px; top: {top}px\" class=\"snake-body {direction}\">\n  {#if isHead}\n    <div id=\"leftEye\" class=\"eyes\" />\n    <div id=\"rightEye\" class=\"eyes\" />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAoKE,IAAI,eAAC,CAAC,AACJ,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,CAC1C,eAAe,CAAE,KAAK,AACxB,CAAC,AAKD,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CACtB,YAAY,IAAI,CAChB,aAAa,IAAI,CACjB,SAAS,CAAE,GAAG,AAChB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,OAAO,CAAE,IAAI,AACf,CAAC;AClLD,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,gBAAgB,CAAE,WAAW,CAC7B,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,gBAAgB,CAAE,GAAG,CACrB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,AACZ,CAAC;ACbD,WAAW,cAAC,CAAC,AACX,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,KAAK,cAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,MAAM,CACxB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC,AACD,SAAS,cAAC,CAAC,AACT,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,AACb,CAAC,AACD,WAAW,MAAM,cAAC,CAAC,AACjB,SAAS,CAAE,OAAO,IAAI,CAAC,AACzB,CAAC,AACD,WAAW,KAAK,cAAC,CAAC,AAChB,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,GAAG,cAAC,CAAC,AACd,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,KAAK,cAAC,CAAC,AAChB,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC"
}